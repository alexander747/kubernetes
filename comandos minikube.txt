minikube start
minikube stop
minikube status

***********************************************************IMPORTANTS**********************************************************
kubectl get all 
kubectl api-resources
kubectl apply -f archivo.yaml
kubectl api-versions 
kubectl port-forward svc/front-venta -n venta-digital 8181:8080 para port forward
 minikube service nombreservicio  --url -n nombrenamespace   (para ver la url donde podemos consultar la pagina)



***********************************************************INGRESS**********************************************************
Define un solo punto de entrada a nuestro cluster y luego aplicando reglas enruta el trafico a distintos servicios. En el ingress describimos las reglas
que se quieren aplicar 

INGRESS CONTROLLER 
Es el que aplica las reglas del ingress y es que enruta el trafico. Tambien expone el puerto que va a estar recibiendo el trafico
Hay 2 ingress controller soportados por kubernetes hasta ahora nginx  y balanceadores de google cloud



***********************************************************SERVICE ACCOUNTS**********************************************************
el cluster ya viene con un service account por defecto y lo podemos ver con el siguiente comando. Siempre que creamos un namespace se crea automaticamente un serviceaccount y si describimos este veremos que siempre va estar atado a un token en secrets

se usa para que un pod dentro de nuestro cluster acceda a otros recursos del cluster  ESTO ES LO MAS IMPORTANTE


kubectl get sa 
kubectl get serviceaccount
kubectl describe sa default

para ver el secret del token 
kubectl get secret

kubectl get secrets nombredelsecreto -o yaml
y este es el ca que utilizabamos para firmar 

when i create a pod always this pod is relationated with a service account and this pod has volumes with name of token of service account
siempre que se crea un pod se relaciona con un service account y ademas se monta dentro del pod los secretos




*********************************************************** RBAC ROLES**********************************************************
ROLE VS CLUSTERROLE
ROLE=> Se debe especificar a que namespace va a tener acceso VERSUS CLUSTERROLE=> Va a tener acceso a todo los namespace

ROLEBINDING VS CLUSTERROLEBINDING son otros archivos yaml
ROLEBINDING Es donde referenciamos un role y un subject que es a quien(usuario) le ponemos el rol
CLUSTERROLEBINDING es donde referenciamos un CLUSTEROLE  y un subjec        t que es a quien le ponemos el clusterole (CLUSTERROLE Va a tener acceso a todo los namespace)

USERS & GROUPS
kubernetes nos provee es una api para autenticar usuarios. para generar usuarios lo podemos hacer de diferentes maneras pero la mas utilizada es CERT y para generaralos podermos usar openssl(certificados) el cluster tiene un CA(Certificate Authorization que sirve para firmar certificados).
1) generamos el cert
2) obtenemos el CSR (lo que coloquemos en CN(common name) sera nuestro usuario, y en organization va hacer el grupo del usuario)
3) fimar el CSR con el CA


kubectl get roles
kubectl get rolebinding

***********************************************************VOLUMENES**********************************************************
ES DONDE PONEMOS ARCHIVOS O DATOS QUE QUEREMOS QUE PERSISTAN ASI EL POD MUERA ASI LO PODRA SEGUIR USANDO OTRO POD
TIPOS DE VOLUMENES:

EmptyDir: crea un directorio a nivel de pod para que el contenedor la pueda consumir. Pero si el pod muere tambien se elimina la data 

HostPath: hace referencia a un path dentro del nodo donde esta corriendo pod. este depende ya de la vida del nodo y no del pod. pero tenemos tambien el mismo problema que si muere el nodo se perdera la data

Cloud: recursos de hardware en la nube. pero es complicado porque tenemos que conocer las especificiones de ese hardaware y configurarlo en el pod pero para esto esta los PVC Y PV

PV (PERSISTENT VOLUMEN) PVC(PERSISTENT VOLUMEN CLOUD)
EL PVC reclama una ruta al PV para montarlo en el sistema de archivos de una imagen y el PV es el crea el recurso en la nube donde se guarda la informacion. El PVC selecciona al PV mediante selectores (labels)

Reclaim policy 
PERO QUE PASA SI SE ELIMINA EL PVC
    RETAIN (retener)=> no se elimina el PV y por lo tanto no se eliminaran los datos de cloud, pero ya no estara disponible para el uso desde otro PVC
    RECICLE (reciclar)=> cuando se elimina el PVC no se eliminara el PV pero si se eliminara el contenido o la data que exista en el cloud, asi el PV puede ser usado en otro PVD
    DELETE => cuando se elimine el PVC se elimina el PV Y la data de cloud por completo

kubectl get pv
kubectl describe pv nombrepv

kubectl get pvc
kubectl describe pvc nombrepv


EXISTEN LOS STORAGE CLASS
si no existe un pv que esta siendo llamado desde un pvc el storage class lo crea automaticamente para provisionarselo
kubectl get sc


EDITAR EL TIPO DE RECLAIM POLICY DE UN PV 
kubectl edit pv nombredelpv   (el edit lo podemos utilizar con cualquier objeto que tengamos deploy, pods...etc)

***********************************************************SECRETS**********************************************************
son similares a los configmaps solo que estos no revelan la informacion que poseen 

para crear un secret desde la terminal
generic : es un comando de crear un secret mas usado 

kubectl create secret generic NOMBRE_QUE_QUERAMOS_PARA_SECRETO --from-file=RUTA_DEL_ARCHIVO_CONFIGURACION
kubectl create secret generic secretouno --from-file=12_secrets/secrets_files/secret.txt

kubectl get secrets
kubectl describe secrets nombredelsecreto (no mostrara el contenido por razones de seguridad)
kubectl get secrets nombresecreto -o yaml    (va a mostrar los secretos pero codificados en base64)
    echo codigobase64 | base64 --decode  (esto nos mostrara ya nuestros secretos)


***********************************************************CONFIGMAPS**********************************************************
objeto que vive en un namespace, es llave valor. se pueden crear o cargar desde un archivo y la otra manera es a travez de un manifiesto configmap(es mejor) y el pod lo puede acceder a travez de variables de entorno o la segunda manera es a travez de volumen 

para crear desde la linea de comandos:
kubectl create configmap NOMBRE_QUE_QUERAMOS_PARA_CONFIGMAP --from-file=RUTA_DEL_ARCHIVO_CONFIGURACION
kubectl create configmap nginx-config --from-file=11_configmaps/configmap/nginx.conf   (si no le pasamos el archivo final va a crear un configmap con todos los archivos que contenga la carpeta llave valor)

kubectl get configmap
kubectl get cm
kubectl describe cm nombredelconfigmap

kubectl delete cm nombreconfigmap



***********************************************************HEALTH**********************************************************
FALTA

***********************************************************LIMITS RESOURCES QUOTA********************************************
afectan a todo a nivel de namespace, suma los limits range y mira si eso esta aceptado para ese namespace. este ayuda al limit range a contralar los recursos
kubectl get resourcequotas 
kubectl describe resourcequotas 

kubectl describe ns (aqui se ve los recursos del namespace)

***********************************************************LIMITS RANGE DEFAULT**********************************************************
los limits range afectan al pod individualmente o lo que es lo mismo a nivel de objeto cuando en el pod no especificamos en resources los limites de limits and request
#si un pod no tiene definido los limites de cpu y ram se le aplicaran los limitRange que tenga ese namespace asignado
#podemos ver con kubectl get limitrange -n dev (dev nombre del namespace)
kubectl get limitrange -n nombreNamesPace              (obtiene los limits creados)

kubectl describe limitrange nombreLimite -n nombreNamesPace (vemos los recursos de un limitrange en especifico)

***********************************************************LIMITS AND REQUEST TO POD**********************************************************
asigna los recursos de cpu y memoria ram cuando se crea un pod, tiene el request que es lo que se le dara dedicado y limits que sera el maximo a dar si se pasa del dedicado

***********************************************************NAMESPACES**********************************************************
kubectl get namespaces
kubectl get ns

kubectl get namespaces --show-labels
kubectl get all -n nombreNamespace (trae todo lo creado dentro de este namespace)
kubectl get pods -n nombreNamespace

acceder a dns en diferentes namespaces
nombreDelServicioNuestro.nombreDelNamespaceNuestro.svc.cluster.local


***********************************************************SERVICES**********************************************************
kubectl get svc
kubectl get svc -l app=algo
kubectl describe svc nombreservicio (ver ip)
kubectl get endpoints (ips de pods dentro de los servicios)

***********************************************************DEPLOYMENTS**********************************************************
kubectl get deployment
kubectl get deploy
kubectl get deploy --show-labels
kubectl rollout status deployment nombredeldeploy
kubectl rollout history deployment nombredeldeploy (mostrara todos los deployments que se han hecho)
kubectl rollout history deployment nombredeldeploy --revision=2 (mostrara lo que paso en ese deploy dependiendo del numero del deploy que le pasemos a partir del history)

COME BACK DEPLOYMENT
kubectl rollout undo deployment nombredeldeploy --to-revision=3 (le pasamos el numero del deploy que obtuvimos con history)



***********************************************************REPLICAS SET**********************************************************
kubectl get pods -l app=backend 
kubectl get rs or replicaset (de api-resources)
kubectl describe rs nombredelreplicaset
kubectl get rs nombredelreplicaset -o yaml



***********************************************************PODS**********************************************************
kubectl run --generator=run-pod/v1 nombredemipodquequierocrear --image=nginx:alpine

kubectl run nombrepod  --image nginx:alpine (crea imagen alpine SIRVE)

kubectl get pods

kubectl describe pod nombrepod      (here we can see the ip pod)
OR 
kubectl port-forward nombrepod ponpuertocualquiera
luego en localhost con ese puerto

kubectl get pod nombrepod -o yaml

kubectl logs nombrepod -f 

kubectl delete -f nombrearchivo.yaml
kubectl delete pod nombrepod

FILTRAR POR LABELS 
kubectl get pods -l app=algo

INGRESAR A POD
kubectl exec -ti nombrepod -- sh

kubectl exec -ti nombrepod -c nombrecontenedor

PUT LABEL TO CONSOLE
kubectl label pods nombrepod new-label=algo

VER MAS INFO DEL POD
kubectl get pods -l app=algo -o wide

CREAR POD TEMPORAL 
kubectl run --rm -ti nombrepod  --image nginx:alpine -- sh


kubectl get pods --watch (importante para ver cuantas veces se reinicia un pod)


